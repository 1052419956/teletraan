<html>
    <script type="text/javascript" src="https://www.google.com/jsapi"></script>
    <script>
        var gauges = {};
        var charts = {};
    </script>
    <div class="row">
        <div id="alarmDivId"></div>
        {% for config in metrics %}
            <div class="col-md-3 col-centered">
                <div id="label_{{ config.title }}" align="center"><b>{{ config.title }}</b></div>
                <div id="gauge_{{ config.title }}" align="center"></div>
            </div>
            <script type="text/javascript">
              google.load("visualization", "1", {packages:["gauge"]});
              google.setOnLoadCallback(drawChart);

              function drawChart() {

                var maxList = [];
                var max = 100;

                {% for spec in config.specs %}
                    maxList.push({{ spec.max }});
                {% endfor %}

                if(maxList.length) {
                    max = Math.max.apply(null, maxList);
                    if(max == 0) {
                        max = 100;
                    }
                }

                var data = google.visualization.arrayToDataTable([
                  ['Label', 'Value'],
                  ['', 0],
                ]);

                var options = {
                  width: 400, height: 175,
                  min: 0,
                  max: max,
                  minorTicks: 5,
                  {% for spec in config.specs %}
                  {% if spec.min != spec.max %}
                      {% if spec.color == "Green"%}
                      greenFrom: {{ spec.min }}, greenTo: {{ spec.max }},
                      {% elif spec.color == "Red" %}
                      redFrom: {{ spec.min }}, redTo: {{ spec.max }},
                      {% elif spec.color == "Yellow" %}
                      yellowFrom: {{ spec.min }}, yellowTo: {{ spec.max}},
                      {% endif %}
                  {% endif %}
                  {% endfor %}
                };

                gauges['{{ config.title }}'] = [data, options];

                var chart = new google.visualization.Gauge(document.getElementById('gauge_{{ config.title}}'));
                charts['{{ config.title }}'] = chart;

                chart.draw(data, options);
              }
            </script>
            {% endfor %}
    </div>

    <script>
        function updateGauge(dict) {
            for (var title in dict['html']) {
                if(dict['html'][title]) {
                    data = gauges[title][0];
                    options = gauges[title][1];
                    data.setValue(0, 1, dict['html'][title].toFixed(2));
                    var chart = charts[title];
                    chart.draw(data, options);
                }
            }
        }

        function updateAlarm(dict) {
            for (var name in dict['html']) {
                if(dict['html'][title]) {
                    data = gauges[title][0];
                    options = gauges[title][1];
                    data.setValue(0, 1, dict['html'][title].toFixed(2));
                    var chart = charts[title];
                    chart.draw(data, options);
                }
            }
        }

        var sh_startTime = new Date().getTime();
        function poll_metrics() {
            if (new Date().getTime() - sh_startTime > 3600000) {
                clearInterval(sh_interval);
            }

            $.get('/env/{{ env.envName }}/{{ env.stageName }}/get_site_metrics/', function (dict) {
                updateGauge(dict);
            }).fail(function() {
                window.console&&console.log('Failed to call get_site_metrics');
            });

            $('#alarmDivId').load('/env/{{ env.envName }}/{{ env.stageName }}/get_service_alarms/',
                function (responseText, textStatus, req) {
                   if (textStatus == "error") {
                       window.console&&console.log('Failed to call get_service_alarms');
                   }
            });
        }
        poll_metrics();
        var sh_interval = setInterval(poll_metrics, 30000);
    </script>
</html>